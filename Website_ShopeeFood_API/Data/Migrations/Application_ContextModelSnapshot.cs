// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopeeFood_Repository;

#nullable disable

namespace ShopeeFoodData.Migrations
{
    [DbContext(typeof(Application_Context))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.AddressToDelivery", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumbers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("areas")
                       .IsRequired()
                       .HasColumnType("nvarchar(max)");

                    b.Property<string>("detailAreas")
                       .IsRequired()
                       .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameUser")
                       .IsRequired()
                       .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                       .IsRequired()
                       .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("Data.Areas", b =>
                {
                    b.Property<int?>("AreaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("AreaID"));

                    b.Property<string>("NameofArea")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AreaID");

                    b.ToTable("areas");
                });

            modelBuilder.Entity("Data.Foods", b =>
                {
                    b.Property<int>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameofFood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("RestaurantID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("TypeofFood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FoodId");

                    b.HasIndex("RestaurantID");

                    b.ToTable("foods");
                });

            modelBuilder.Entity("Data.InvoiceDetails", b =>
                {
                    b.Property<int?>("InvoicesID")
                        .HasColumnType("int");

                    b.Property<int?>("FoodId")
                        .HasColumnType("int");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameofFood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numbers")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("InvoicesID", "FoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("invoiceDetails");
                });

            modelBuilder.Entity("Data.Invoices", b =>
                {
                    b.Property<int?>("InvoicesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("InvoicesID"));

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("InvoicesID");

                    b.HasIndex("UserID");

                    b.ToTable("invoices");
                });

            modelBuilder.Entity("Data.Promotion", b =>
                {
                    b.Property<int?>("PromotionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PromotionID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PromotionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("PromotionID");

                    b.HasIndex("UserId");

                    b.ToTable("promotions");
                });

            modelBuilder.Entity("Data.Restaurant", b =>
                {
                    b.Property<int?>("RestaurantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("RestaurantID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AreaID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CloseTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ID")
                        .HasColumnType("int");

                    b.Property<int?>("IDDetailsArea")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameofRestaurant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OpenTime")
                        .HasColumnType("datetime2");

                    b.HasKey("RestaurantID");

                    b.HasIndex("AreaID");

                    b.HasIndex("ID");

                    b.HasIndex("IDDetailsArea");

                    b.HasIndex("PromotionID");

                    b.ToTable("restaurants");
                });

            modelBuilder.Entity("Data.Types", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ID"));

                    b.Property<string>("NameofType")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ID");

                    b.ToTable("types");
                });

            modelBuilder.Entity("Data.User", b =>
                {
                    b.Property<int?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("UserId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("ShopeeFood_Data.Model.DetailAreas", b =>
                {
                    b.Property<int?>("IDDetailsArea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("IDDetailsArea"));

                    b.Property<int?>("AreaID")
                        .HasColumnType("int");

                    b.Property<string>("NameofDetailsArea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDDetailsArea");

                    b.HasIndex("AreaID");

                    b.ToTable("detailAreas");
                });

            modelBuilder.Entity("ShopeeFood_Data.Model.Token", b =>
                {
                    b.Property<int>("TokenID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TokenID"));

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("refreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("refreshTokenExpireTime")
                        .HasColumnType("datetime2");

                    b.HasKey("TokenID");

                    b.HasIndex("UserId");

                    b.ToTable("tokens");
                });

            modelBuilder.Entity("Data.AddressToDelivery", b =>
                {
                    b.HasOne("Data.User", "User")
                        .WithMany("AddressToDeliveries")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Foods", b =>
                {
                    b.HasOne("Data.Restaurant", "Restaurant")
                        .WithMany("Foods")
                        .HasForeignKey("RestaurantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Data.InvoiceDetails", b =>
                {
                    b.HasOne("Data.Foods", "Foods")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Invoices", "Invoices")
                        .WithMany("invoiceDetails")
                        .HasForeignKey("InvoicesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Foods");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Data.Invoices", b =>
                {
                    b.HasOne("Data.User", "User")
                        .WithMany("invoices")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Promotion", b =>
                {
                    b.HasOne("Data.User", "User")
                        .WithMany("Promotions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Restaurant", b =>
                {
                    b.HasOne("Data.Areas", "Area")
                        .WithMany("Restaurants")
                        .HasForeignKey("AreaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Types", "Type")
                        .WithMany("restaurants")
                        .HasForeignKey("ID");

                    b.HasOne("Data.Promotion", "Promotion")
                        .WithMany("restaurants")
                        .HasForeignKey("PromotionID");

                    b.Navigation("Area");

                    b.Navigation("Type");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("ShopeeFood_Data.Model.DetailAreas", b =>
                {
                    b.HasOne("Data.Areas", "Areas")
                        .WithMany()
                        .HasForeignKey("AreaID");

                    b.Navigation("Areas");
                });

            modelBuilder.Entity("ShopeeFood_Data.Model.Token", b =>
                {
                    b.HasOne("Data.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Data.Areas", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("Data.Invoices", b =>
                {
                    b.Navigation("invoiceDetails");
                });

            modelBuilder.Entity("Data.Restaurant", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("Data.Types", b =>
                {
                    b.Navigation("restaurants");
                });

            modelBuilder.Entity("Data.User", b =>
                {
                    b.Navigation("AddressToDeliveries");

                    b.Navigation("Promotions");

                    b.Navigation("invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
